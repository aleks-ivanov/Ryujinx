name: CI/CD Pipeline

on: [push, pull_request, workflow_dispatch]

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    outputs:
      latest_version: ${{ steps.tag_generator.outputs.new_version }}
      is_default_branch: ${{ steps.conditionals_handler.outputs.is_default_branch }}
    env:
      GITHUB_RUN_NUMBER: ${{ github.run_number }}
    steps:
      - name: Data gatherer
        id: data_gatherer
        shell: pwsh
        run: |
          # Get default branch
          $repo = 'microsoft/OpenAPI.NET'
          $defaultBranch = Invoke-RestMethod -Method GET -Uri https://api.github.com/repos/$repo | Select-Object -ExpandProperty default_branch
          Write-Output "::set-output name=default_branch::$(echo $defaultBranch)"

      - name: Conditionals handler
        id: conditionals_handler
        shell: pwsh
        run: |
          $defaultBranch = "${{ steps.data_gatherer.outputs.default_branch }}"
          $githubRef = "${{ github.ref }}"
          $isDefaultBranch = 'false'
          if ( $githubRef -like "*$defaultBranch*" ) {
            $isDefaultBranch = 'true'
          }
          Write-Output "::set-output name=is_default_branch::$(echo $isDefaultBranch)"

      - name: Checkout repository
        id: checkout_repo
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Bump GH tag
        id: tag_generator
        uses: mathieudutour/github-tag-action@v5.4
        with: 
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: false

      - name: Build solution
        id: build_solution
        shell: pwsh
        run: |
          $gitNewVersion = if ("${{ steps.tag_generator.outputs.new_version }}") {"${{ steps.tag_generator.outputs.new_version }}"} else {$null}
          $projectCurrentVersion = ([xml](Get-Content .\Ryujinx\Ryujinx.csproj)).Project.PropertyGroup.Version
          $projectNewVersion = $gitNewVersion ?? $projectCurrentVersion

          dotnet build .\Ryujinx.sln -c Release /p:Version=$projectNewVersion

      - name: Run unit tests
        id: run_unit_tests
        shell: pwsh
        run: |
          Get-ChildItem *.Tests*.csproj -recurse | ForEach-Object { dotnet test $PSItem.FullName }

      - if: steps.tag_generator.outputs.new_version != ''
        name: Upload NuGet package as artifact
        id: upload_nupkg_artifact
        uses: actions/upload-artifact@v1
        with:
          name: NuGet package
          path: nuget/output/

  cd:
    if: needs.ci.outputs.is_default_branch == 'true' && needs.ci.outputs.latest_version != ''
    name: Continuous Deployment
    needs: ci
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        id: checkout_repo
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Download and extract NuGet packages
        id: dl_packages_artifact
        uses: actions/download-artifact@v2
        with:
          name: NuGet packages
          path: NuGet/

      - name: Push NuGet package
        id: push_nuget_package
        shell: pwsh
        run: |
          $nupkgPath = "NuGet/package.nupkg"
          
          nuget push $nupkgPath `
          -ApiKey $env:NUGET_API_KEY `
          -Source https://api.nuget.org/v3/index.json
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

# Built with ‚ù§ by [Pipeline Foundation](https://pipeline.foundation)